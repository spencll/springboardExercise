1. O(n + 10) 
O(n)

2. O(100 * n)
O(n)

3. O(25)
O(1)

4. O(n^2 + n^3)
O(n^3)

5. O(n + n + n + n)
O(n)

6. O(1000 * log(n) + n)
O(n)

7. O(1000 * n * log(n) + n)
O(n log (n))
8. O(2^n + n^2)
O(2^n)
9. O(5 + 3 + 1)
O(1)

10. O(n + n^(1/2) + n^2 + n * log(n)^10)
O(n^2)

function logUpTo(n) {
  for (let i = 1; i <= n; i++) {
    console.log(i);
  }
}
O(n), fixed to loops n times 

function logAtLeast10(n) {
  for (let i = 1; i <= Math.max(n, 10); i++) {
    console.log(i);
  }
}
O(n), time fixed to n still if greater than 10

function logAtMost10(n) {
  for (let i = 1; i <= Math.min(n, 10); i++) {
    console.log(i);
  }
}
O(1), not fixed to n but a constant (10)

function onlyElementsAtEvenIndex(array) {
  let newArray = [];
  for (let i = 0; i < array.length; i++) {
    if (i % 2 === 0) {
      newArray.push(array[i]);
    }
  }
  return newArray;
}
O(n), time fixed to length array 

function subtotals(array) {
  let subtotalArray = [];
  for (let i = 0; i < array.length; i++) {
    let subtotal = 0;
    for (let j = 0; j <= i; j++) {
      subtotal += array[j];
    }
    subtotalArray.push(subtotal);
  }
  return subtotalArray;
}

O(n^2), time fixed to n in two instances 

function vowelCount(str) {
  let vowelCount = {};
  const vowels = "aeiouAEIOU";

  for (let char of str) {
    if(vowels.includes(char)) {
      if(char in vowelCount) {
        vowelCount[char] += 1;
      } else {
        vowelCount[char] = 1;
      }
    }
  }

  return vowelCount;
}

O(n), time fixed to str 

1. True or false: n^2 + n is O(n^2).
True, n^2 is the slowest factor  

2. True or false: n^2 * n is O(n^3).
True, n^3 is the slowest factor 
3. True or false: n^2 + n is O(n).
False, n^2 is the slowest factor
4. What’s the time complexity of the .indexOf array method?
O(n), directly depends on array length
5. What’s the time complexity of the .includes array method?
O(n), directly depends on array length
6. What’s the time complexity of the .forEach array method?
O(n), directly dpeneds on array length
7. What’s the time complexity of the .sort array method?
O(n log n), time decreases with more array length then increases at a certain point
8. What’s the time complexity of the .unshift array method?
O(n), directly depends on array length
9. What’s the time complexity of the .push array method?
O(1), thing added on to original array so doesn't matter length of original 
10. What’s the time complexity of the .splice array method?
Depends on what part is spliced, O(1) for just the end, O(n) for more
11. What’s the time complexity of the .pop array method?
O(1), removing from array regardless of array length
12. What’s the time complexity of the Object.keys() function?
O(n), depends on number of keys 
13. What’s the space complexity of the Object.keys() function? 
O(n), object is reference type



